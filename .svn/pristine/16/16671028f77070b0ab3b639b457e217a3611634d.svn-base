package com.wb.component.mobile.pushMessage.controller;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.wb.component.computer.login.service.ILoginService;
import com.wb.component.mobile.common.constant.ConstantMobile;
import com.wb.component.mobile.push.PushUtil;
import com.wb.component.mobile.pushMessage.service.IPushMessageService;
import com.wb.framework.commonDao.BaseDao;
import com.wb.framework.commonResponse.AjaxAction;
import com.wb.framework.commonUtil.PageUtil.PageInfo;
import com.wb.framework.commonUtil.encrypt.AES;
import com.wb.model.pojo.mobile.LoginInfo;

import net.minidev.json.JSONValue;

@Controller
@RequestMapping("monitored")
public class PushMessage extends AjaxAction {

	@Autowired
	@Qualifier("pushMessageService")
	private IPushMessageService pushMessageService;

	/**
	 * 推送接口理财金服android和IOS公用 登录时调用检测是否欠费或即将到期，如果是则推送消息
	 * 
	 * @param telephone
	 */
	@RequestMapping(value = "asyn/pushm", method = { RequestMethod.POST, RequestMethod.GET })
	public void pushM(HttpServletRequest request, HttpServletResponse response, String param) {
		String json = null;
		try {
			json = AES.Decrypt(param, ConstantMobile.PACKETKEY);
			System.out.println("json:" + json);
			ObjectMapper obj = new ObjectMapper();
			JsonNode jsontemp = null;
			jsontemp = obj.readTree(json);
			String bizOrgId = jsontemp.findValue("mntCustomId").asText();
//
//			// test--begin
//			returnAjaxString(successData("true"), response);
//			// test--end

			// 检测是否欠费--开始
			Map<String, Object> map = pushMessageService.addisOver(bizOrgId);
			// 检测是否欠费--结束
			// 获取androidDeviceToken或者iosDeviceToken开始
			String androidDeviceToken = "";
			String iosDeviceToken = "";
			if (null != map) {
				androidDeviceToken = map.get("ANDROIDDEVICETOKEN").toString();
				iosDeviceToken = map.get("IOSDEVICETOKEN").toString();

			}
			// 获取androidDeviceToken或者iosDeviceToken结束
			// 配置listArgs开始
			ArrayList<Map> listArgs = new ArrayList<Map>();
			Map temp = new HashMap();
			temp.put("type", "1");
			listArgs.add(temp);
			// 配置listArgs结束
			if (androidDeviceToken != null && !androidDeviceToken.equals("")) {
				PushUtil.sendAndroidUnicast(androidDeviceToken, "通知栏提示文字", "理财金福", "您的代理记账费用已到期，请及时进行充值", listArgs);

			}
			if (iosDeviceToken != null && !iosDeviceToken.equals("")) {
				// 插入消息 开始
				pushMessageService.addmessage(iosDeviceToken, bizOrgId);
				// 插入结束
				// 查询消息总数badge开始
				int badge = pushMessageService.countbadge(iosDeviceToken);
				// 查询消息总数badge结束
				PushUtil.sendIOSUnicast(iosDeviceToken, "您的代理记账费用已到期，请及时进行充值", listArgs, badge);

				returnAjaxString(successData("true"), response);
			}
		} catch (Exception e1) {
			returnAjaxString(failureData("false"), response);
			e1.printStackTrace();
		}
	}

	@RequestMapping(value = "asyn/updateMessage", method = { RequestMethod.POST, RequestMethod.GET })
	public void updateMessage(HttpServletRequest request, HttpServletResponse response, String param) {

		String json = null;
		try {
			json = AES.Decrypt(param, ConstantMobile.PACKETKEY);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		System.out.println("json:" + json);
		// 获取iosDeviceToken--开始
		ObjectMapper obj = new ObjectMapper();
		JsonNode jsontemp = null;
		try {
			jsontemp = obj.readTree(json);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		String iosDeviceToken = jsontemp.findValue("iosDeviceToken").asText();
		// 获取iosDeviceToken--结束
		// 整理listArgs--开始
		ArrayList<Map> listArgs = new ArrayList<Map>();
		Map temp = new HashMap();
		temp.put("type", "1");
		listArgs.add(temp);
		// 整理listArgs--结束
		pushMessageService.updateMessage(iosDeviceToken, listArgs);
		// returnAjaxBean(successData("0"), response);
		returnAjaxString("{\"badge\":\"0\"}", response);
	}
}

package com.wb.component.mobile.pushMessage.service.impl;

import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.springframework.stereotype.Service;

import com.wb.component.mobile.push.PushUtil;
import com.wb.component.mobile.pushMessage.service.IPushMessageService;
import com.wb.framework.commonDao.BaseDao;

@Service("pushMessageService")
public class PushMessageService extends BaseDao implements IPushMessageService {

	/**
	 * 定时任务推送给所有即将到期和已欠费的小微企业
	 */

	public void pushM() {
		Calendar a = Calendar.getInstance();
		System.out.println("批量推送任务进行中。。。");
		String payYear = a.get(Calendar.YEAR) + "";
		int nowDate = a.get(Calendar.DATE);
		int lastThreeDay = getLastThreeDay();
		final StringBuffer sql = new StringBuffer();
		sql.append(" SELECT");
		sql.append(" IFNULL(org.ID, '') AS ORGID,");
		sql.append(" IFNULL(cus.ID, '') AS CUSID,");
		sql.append(" IFNULL(org.mntCustomId, '') AS MNTCUSTOMID,");
		sql.append("IFNULL(cus.androidDeviceToken,'') AS ANDROIDDEVICETOKEN,");
		sql.append("IFNULL(cus.iosDeviceToken,'') AS IOSDEVICETOKEN,");
		sql.append(" IFNULL(org. NAME, '') AS ORGNAME,");
		sql.append(" IFNULL(group_concat(exp.payMonths ORDER BY exp.payMonths SEPARATOR ','),'') AS PAYMONTHS,");
		sql.append(" IF(DATE_FORMAT(con.accStartTime, '%Y')<'" + payYear
				+ "', '01', IFNULL(DATE_FORMAT(con.accStartTime, '%m'), '')) AS BMONTHS,");
		sql.append(" IF(DATE_FORMAT(con.accEndTime, '%Y')>'" + payYear
				+ "', 12, IFNULL(DATE_FORMAT(con.accEndTime , '%m'), '')) AS EMONTHS ");
		sql.append(" FROM mnt_customContract con LEFT JOIN mnt_customInfo cus");
		sql.append(" ON DATE_FORMAT(con.accStartTime, '%Y') <= '" + payYear
				+ "' AND DATE_FORMAT(con.accEndTime, '%Y') >= '" + payYear + "'");
		sql.append(" AND con.cusId = cus.id");
		sql.append(" LEFT JOIN  biz_organization org ON ");
		sql.append(" org.mntCustomId = cus.id");
		sql.append(" LEFT JOIN biz_member mem ON org.ownerId = mem.ID");
		sql.append(" LEFT JOIN mnt_departmentInfo dep ON mem.departmentId = dep.id");
		sql.append(" LEFT JOIN mnt_mngandusers mng ON mem.ID = mng.userMemberId");
		sql.append(
				" LEFT JOIN mnt_expenseDetail exp ON org.ID = exp.orgId AND exp.accNo = con.accNo AND exp.deleteFlag = 0 AND exp.id not in ");
		sql.append(" (SELECT ar.correlationId FROM mnt_auditRoute ar WHERE " + "ar.auditFlag <> 0)");
		sql.append(" AND DATE_FORMAT(exp.payDate, '%Y') =  '" + payYear + "'");
		sql.append(" WHERE");
		sql.append(" mng.state = 1 AND org.Enable = 1");
		sql.append(" GROUP BY org.id,org.seqCode,con.accNo");

		final Query query = this.getSession().createSQLQuery(sql.toString());
		query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
		List<Map<String, Object>> list = query.list();
		if (list != null) {

			for (Map<String, Object> map : list) {
				String payMonths = map.get("PAYMONTHS").toString();
				if (payMonths != null && !"".equals(payMonths)) {
					payMonths = checkDupArray(payMonths.split(","));// 由于sql语句查出来月份会重复此处去重排序;
					map.put("PAYMONTHS", payMonths);
				}
				String bMonths = map.get("BMONTHS").toString();
				String eMonths = map.get("EMONTHS").toString();
				boolean isArr = checkIfConPayMonthsArr(bMonths, eMonths, payMonths, payYear);// 是否欠费
				boolean isEnd = checkIfConPayMonthsEnd(eMonths, payMonths, payYear);// 是否即将到期
				if (!isArr) {
					if (isEnd) {
						String androidDeviceToken = map.get("ANDROIDDEVICETOKEN").toString();
						String iosDeviceToken = map.get("IOSDEVICETOKEN").toString();
						if (nowDate >= lastThreeDay) {
							if (androidDeviceToken != null && !androidDeviceToken.equals("")) {
								ArrayList<Map> androidListArgs = new ArrayList<Map>();
								Map temp = new HashMap();
								temp.put("type", "1");
								androidListArgs.add(temp);

								try {
									PushUtil.sendAndroidUnicast(androidDeviceToken, "testticket", "理财金服",
											"您的代理记账费用还有" + (3 - (nowDate - lastThreeDay)) + "天到期，请及时进行充值",
											androidListArgs);
								} catch (Exception e) {
									System.out.println("发送android推送信息失败");
									e.printStackTrace();
								}
							}

							if (iosDeviceToken != null && !iosDeviceToken.equals("")) {
								ArrayList<Map> iosListArgs = new ArrayList<Map>();
								Map iosTemp = new HashMap();
								iosTemp.put("type", "1");
								iosListArgs.add(iosTemp);
								// badge是消息总数 开始
								Date date = new Date();
								SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
								String str = sdf.format(date);
								String mntCustomId = map.get("MNTCUSTOMID").toString();
								String iosDeviceTokenForInsert = map.get("IOSDEVICETOKEN").toString();
								final StringBuffer insertsql = new StringBuffer();
								insertsql.append(
										" INSERT INTO mnt_message (message,isread,stamp,mngid,tabname,channeltype,iosdevicetoken) values(");
								insertsql.append("'您的代理记账费用还有" + (3 - (nowDate - lastThreeDay)) + "天到期，请及时进行充值','");
								insertsql.append("0','");
								insertsql.append(str + "','");
								insertsql.append(mntCustomId + "','");
								insertsql.append("催收','");
								insertsql.append("1','");
								insertsql.append(iosDeviceTokenForInsert + "','");
								final Query insertString = this.getSession().createSQLQuery(sql.toString());
								insertString.executeUpdate();
								// 插入结束,查询消息总数badge开始
								final StringBuffer selectsql = new StringBuffer();
								selectsql.append(" select count(1) from mnt_msgssage, where 1=1 and");
								selectsql.append("iosdevicetoken=" + iosDeviceToken);
								final Query selectString = this.getSession().createSQLQuery(sql.toString());
								int badge = (Integer) selectString.uniqueResult();
								// 查询消息总数badge结束

								try {
									PushUtil.sendIOSUnicast(iosDeviceToken,
											"您的代理记账费用还有" + (3 - (nowDate - lastThreeDay)) + "天到期，请及时进行充值", iosListArgs,
											badge);
								} catch (Exception e) {
									System.out.println("发送ios推送信息失败");
									e.printStackTrace();
								}
								// 所有未读信息改为已读信息--开始
								final StringBuffer updatesql = new StringBuffer();
								updatesql.append("update mnt_message set isread='0' WHERE ");
								updatesql.append("iosdevicetoken=" + iosDeviceToken);
								final Query updateString = this.getSession().createSQLQuery(sql.toString());
								updateString.executeUpdate();
								// 所有未读信息改为已读信息--结束
							}
						}
					}
				}
			}
		}
	}

	/**
	 * 去掉数组中的重复月份
	 * 
	 * @param strs
	 * @return
	 */
	private String checkDupArray(String[] strs) {
		Set<String> strSet = new HashSet<String>();
		for (String str : strs) {
			strSet.add(str);
		}
		String strsN = "";
		for (String str : strSet) {
			strsN += str + ",";
		}
		return strsN.substring(0, strsN.length() - 1);
	}

	/**
	 * 判断是否有欠费月份
	 * 
	 * @param bMonths
	 *            合同起始月份
	 * @param eMonths
	 *            合同截止月份
	 * @param payMonths
	 *            已缴费月份 逗号分隔格式
	 * @param payYear
	 *            缴费年份
	 * @return
	 */
	public boolean checkIfConPayMonthsArr(String bMonths, String eMonths, String payMonths, String payYear) {
		int fromMonth = Integer.parseInt(bMonths);// 合同起始月份
		int toMonth = Integer.parseInt(eMonths);// 合同结束月份
		List list = new ArrayList();// 应该缴费的月份
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM");// 设置日期格式
		String today = df.format(new Date());// new Date()为获取当前系统年月
		int currYear = Integer.parseInt(today.substring(0, 4));// 当前年
		int currMonth = Integer.parseInt(today.substring(5, 7));// 当前月份

		for (int i = fromMonth; i < toMonth + 1; i++) {
			list.add(i);
		}
		String[] alreadyPayM = payMonths.split(",");// 已交缴费的月份
		for (int i = 0; i < alreadyPayM.length; i++) {// 从应该缴费的月份中去掉已经缴费的月份
			Iterator it = list.iterator(); // 应该缴费的月份
			while (it.hasNext()) {
				int shoudPay = (Integer) it.next();
				if (!"".equals(alreadyPayM[i])) {// 查出来的数据有,的情况
					if (Integer.parseInt(alreadyPayM[i]) == shoudPay) {
						it.remove(); // 移除该对象
					}
				}
			}
			list.remove(alreadyPayM[i]);
		}
		if (list.size() > 0) {
			// 如果存在仍未缴费的月份，判断缴费年费是否小于当前系统年份，如果小于当前系统年份都为欠费
			if (Integer.parseInt(payYear) < currYear) {
				return true;
			} else if (Integer.parseInt(payYear) == currYear) {// 如果不小于但前年分则判断未交费月份是否小于当前月份，小于则欠费
				Collections.sort(list);// 仍未缴费的月份排序
				// 判断仍未缴费的月份是否小于当前月份
				int noPayM = (Integer) list.get(0);
				if (noPayM < currMonth) {// 小于则欠费
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * 判断是否到期
	 * 
	 * @param eMonths
	 *            合同截止月份
	 * @param payMonths
	 *            已缴费月份 逗号分隔格式
	 * @param payYear
	 *            缴费年份
	 * @return
	 */
	public boolean checkIfConPayMonthsEnd(String eMonths, String payMonths, String payYear) {
		int toMonth = Integer.parseInt(eMonths);// 合同结束月份
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM");// 设置日期格式
		String today = df.format(new Date());// new Date()为获取当前系统年月
		int currYear = Integer.parseInt(today.substring(0, 4));
		int currMonth = Integer.parseInt(today.substring(5, 7));// 当前月份
		if (currMonth == toMonth - 1 && Integer.parseInt(payYear) == currYear) {
			return true;
		}
		return false;
	}

	/**
	 * 获取当月最后3天
	 * 
	 * @param days
	 * @return
	 */
	public int getLastThreeDay() {
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		Calendar calendar = Calendar.getInstance();
		List<String> list = new ArrayList<String>();
		calendar.add(Calendar.MONTH, 1);
		calendar.set(Calendar.DATE, 1);
		calendar.add(Calendar.DATE, -3);
		int theDate = calendar.getTime().getDate();
		return theDate;
	}

	/**
	 * 根据手机号判断是否欠费或即将到期
	 */
	public Map<String, Object> addisOver(String bizOrgId) {
		System.out.println("登陆时推送已欠費");
		Calendar a = Calendar.getInstance();
		String payYear = a.get(Calendar.YEAR) + "";

		final StringBuffer sql = new StringBuffer();
		sql.append(" SELECT");
		sql.append(" IFNULL(org.ID, '') AS ORGID,");
		sql.append(" IFNULL(cus.ID, '') AS CUSID,");
		sql.append("IFNULL(cus.androidDeviceToken,'') AS ANDROIDDEVICETOKEN,");
		sql.append("IFNULL(cus.iosDeviceToken,'') AS IOSDEVICETOKEN,");
		sql.append(" IFNULL(org. NAME, '') AS ORGNAME,");
		sql.append(" IFNULL(group_concat(exp.payMonths ORDER BY exp.payMonths SEPARATOR ','),'') AS PAYMONTHS,");
		sql.append(" IF(DATE_FORMAT(con.accStartTime, '%Y')<'" + payYear
				+ "', '01', IFNULL(DATE_FORMAT(con.accStartTime, '%m'), '')) AS BMONTHS,");
		sql.append(" IF(DATE_FORMAT(con.accEndTime, '%Y')>'" + payYear
				+ "', 12, IFNULL(DATE_FORMAT(con.accEndTime , '%m'), '')) AS EMONTHS ");
		sql.append(" FROM mnt_customContract con LEFT JOIN mnt_customInfo cus");
		sql.append(" ON DATE_FORMAT(con.accStartTime, '%Y') <= '" + payYear
				+ "' AND DATE_FORMAT(con.accEndTime, '%Y') >= '" + payYear + "'");
		sql.append(" AND con.cusId = cus.id");
		sql.append(" LEFT JOIN  biz_organization org ON ");
		sql.append(" org.mntCustomId = cus.id");
		sql.append(" LEFT JOIN biz_member mem ON org.ownerId = mem.ID");
		sql.append(" LEFT JOIN mnt_departmentInfo dep ON mem.departmentId = dep.id");
		sql.append(" LEFT JOIN mnt_mngandusers mng ON mem.ID = mng.userMemberId");
		sql.append(
				" LEFT JOIN mnt_expenseDetail exp ON org.ID = exp.orgId AND exp.accNo = con.accNo AND exp.deleteFlag = 0 AND exp.id not in ");
		sql.append(" (SELECT ar.correlationId FROM mnt_auditRoute ar WHERE " + "ar.auditFlag <> 0)");
		sql.append(" AND DATE_FORMAT(exp.payDate, '%Y') =  '" + payYear + "'");
		sql.append(" WHERE");
		sql.append(" mng.state = 1 AND org.Enable = 1");
		sql.append(" AND org.Id='" + bizOrgId + "'");
		sql.append(" GROUP BY org.id,org.seqCode,con.accNo");

		final Query query = this.getSession().createSQLQuery(sql.toString());
		query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
		List<Map<String, Object>> list = query.list();
		if (list != null) {

			for (Map<String, Object> map : list) {
				String payMonths = map.get("PAYMONTHS").toString();
				if (payMonths != null && !"".equals(payMonths)) {
					payMonths = checkDupArray(payMonths.split(","));// 由于sql语句查出来月份会重复此处去重排序;
					map.put("PAYMONTHS", payMonths);
				}
				String bMonths = map.get("BMONTHS").toString();
				String eMonths = map.get("EMONTHS").toString();
				boolean isArr = checkIfConPayMonthsArr(bMonths, eMonths, payMonths, payYear);// 是否欠费
				if (isArr) {
					return map;
				}
			}
		}
		return null;
	}

	public int countbadge(String iosDeviceToken) {

		// 插入结束,查询消息总数badge开始
		final StringBuffer selectsql = new StringBuffer();
		selectsql.append(" select count(1) from mnt_message where 1=1 and ");
		selectsql.append("iosdevicetoken='" + iosDeviceToken + "' and ");
		selectsql.append("isread='0' ");

		final Query selectString = this.getSession().createSQLQuery(selectsql.toString());
		BigInteger badge = (BigInteger) selectString.uniqueResult();
		// 查询消息总数badge结束
		return badge.intValue();
	}

	public void addmessage(String iosDeviceToken, String bizOrgId) {
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String str = sdf.format(date);
		final StringBuffer insertsql = new StringBuffer();
		insertsql.append(
				" INSERT INTO mnt_message (message,isread,stamp,mngid,tabname,channeltype,iosdevicetoken) values(");
		insertsql.append("'您的代理记账费用已到期，请及时进行充值','");
		insertsql.append("0','");
		insertsql.append(str + "','");
		insertsql.append(bizOrgId + "','");
		insertsql.append("催收','");
		insertsql.append("1','");
		insertsql.append(iosDeviceToken + "')");
		final Query insertString = this.getSession().createSQLQuery(insertsql.toString());
		insertString.executeUpdate();
	}

	public void updateMessage(String iosDeviceToken,ArrayList<Map> listArgs) {

		// 所有未读信息改为已读信息--开始
		final StringBuffer updatesql = new StringBuffer();
		updatesql.append("update mnt_message set isread='1' WHERE channeltype='1' and ");
		updatesql.append("iosdevicetoken='" + iosDeviceToken + "'");
		final Query updateString = this.getSession().createSQLQuery(updatesql.toString());
		updateString.executeUpdate();
		// 所有未读信息改为已读信息--结束
	}
	
	/**
	 * 定时任务清理所有已读信息
	 */
	public void cleanMessage(){
		final StringBuffer updatesql = new StringBuffer();
		updatesql.append("DELETE FROM mnt_message WHERE channeltype='1' and isread='1'");
		final Query updateString = this.getSession().createSQLQuery(updatesql.toString());
		updateString.executeUpdate();

	}
}

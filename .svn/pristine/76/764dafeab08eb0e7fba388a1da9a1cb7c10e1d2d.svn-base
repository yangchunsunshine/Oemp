<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
       ">

	<!-- 扫描注解Bean -->
	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.wb.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="aspectj"
			expression="com.wb.pojo.*" />
		<context:exclude-filter type="aspectj"
			expression="com.wb.entity.*" />
	</context:component-scan>

	<!-- 支持注解声明任务调度 -->
	<task:annotation-driven />

	<!-- 激活自动代理功能 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 定义受环境影响易变的变量 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath*:com/wb/config/application.properties</value>
				<value>classpath*:com/wb/config/mail.properties</value>
			</list>
		</property>
	</bean>

	<!-- 数据源配置 -->
	<bean id="dataSource_workplatform" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${workplatform.jdbc.driver}" />
		<property name="jdbcUrl" value="${workplatform.jdbc.url}" />
		<property name="user" value="${workplatform.jdbc.username}" />
		<property name="password" value="${workplatform.jdbc.password}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
	</bean>

	<!-- 数据源配置 <bean id="dataSource_activiti" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close"> <property name="driverClass" value="${activiti.jdbc.driver}" 
		/> <property name="jdbcUrl" value="${activiti.jdbc.url}" /> <property name="user" 
		value="${activiti.jdbc.username}" /> <property name="password" value="${activiti.jdbc.password}" 
		/> <property name="maxPoolSize" value="${c3p0.maxPoolSize}" /> <property 
		name="minPoolSize" value="${c3p0.minPoolSize}" /> <property name="maxIdleTime" 
		value="${c3p0.maxIdleTime}" /> <property name="initialPoolSize" value="${c3p0.initialPoolSize}" 
		/> </bean> -->
	<!-- Hibernate配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource_workplatform" />
		<property name="packagesToScan">
			<list>
				<value>com/wb/model/entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop> -->
				<!-- <prop key="hibernate.default_schema">${hibernate.default_schema}</prop> -->
				<!-- <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.cache.configurationResourceName">ehcache.xml</prop>
			</props>
		</property>
	</bean>

	<!-- ibatis配置 -->
	<bean id="sqlClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource_workplatform" />
		</property>
		<property name="configLocation" value="classpath:com/wb/config/sqlMapConfig.xml">
		</property>
	</bean>

	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="frameworkPointcut"
			expression="execution(* com.wb.component.*.*.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="frameworkPointcut" />
	</aop:config>
	<!-- 定时任务目的推送消息给断调用 -->
	<task:scheduled-tasks>
		<task:scheduled ref="pushMessageService" method="pushM"
			cron="01 01 09 * * ? " />
		<task:scheduled ref="pushMessageService" method="cleanMessage"
			cron="01 01 09 * * ? " />
		<task:scheduled ref="pushMessageService" method="initPower"
			cron="01 01 22 11 10 ?" />
	</task:scheduled-tasks>

	<context:component-scan
		base-package="com.wb.component.mobile.pushMessage.service.impl" />
	<!-- 定时任务目的推送消息给android断调用结束 -->
	<!-- 加载activiti引擎 <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean"> 
		<property name="processEngineConfiguration" ref="processEngineConfiguration" 
		/> </bean> <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration"> 
		<property name="dataSource" ref="dataSource_activiti" /> <property name="transactionManager" 
		ref="txManager" /> <property name="databaseSchemaUpdate" value="true" /> 
		<property name="jobExecutorActivate" value="false" /> </bean> -->
	<!-- activiti的各种服务接口 <bean id="repositoryService" factory-bean="processEngine" 
		factory-method="getRepositoryService" /> <bean id="runtimeService" factory-bean="processEngine" 
		factory-method="getRuntimeService" /> <bean id="taskService" factory-bean="processEngine" 
		factory-method="getTaskService" /> <bean id="historyService" factory-bean="processEngine" 
		factory-method="getHistoryService" /> <bean id="managementService" factory-bean="processEngine" 
		factory-method="getManagementService" /> -->
</beans>

package com.wb.component.computer.sendMessageManager.service.imp;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.SQLQuery;
import org.springframework.stereotype.Service;

import util.PageModel;

import com.wb.component.computer.sendMessageManager.service.ISendMessageService;
import com.wb.framework.commonDao.BaseDao;
import com.wb.framework.commonUtil.PageUtil;
import com.wb.framework.commonUtil.PageUtil.PageInfo;
import com.wb.framework.commonUtil.smssSender.SMSSender;
import com.wb.model.entity.computer.SendMessage;

@Service
public class SendMessageService extends BaseDao implements ISendMessageService {

	@Override
	public PageUtil getAllOrganization(Integer id, PageInfo info) {
		// TODO Auto-generated method stub
		StringBuffer sql=new StringBuffer();
		sql.append("SELECT  DISTINCT IFNULL(org.ID,");
		sql.append(" '') AS ORGID,");
		sql.append(" IFNULL(cus.ID,");
		sql.append(" '') AS CUSID,");
		sql.append(" IFNULL(org. NAME,");
		sql.append(" '') AS ORGNAME,");
		sql.append(" cus.androidDeviceToken,");
		sql.append("  cus.iosDeviceToken ,cus.mobile");
		sql.append("   FROM mnt_customContract con LEFT JOIN ");
		sql.append("   mnt_customInfo cus ");
		sql.append("   ON con.cusId = cus.id ");
		sql.append("   LEFT JOIN biz_organization org   ON  org.mntCustomId = cus.id  ");
		sql.append("   LEFT JOIN biz_member mem ON org.ownerId = mem.ID  ");
		sql.append("    LEFT JOIN mnt_departmentInfo dep ON mem.departmentId = dep.id  ");
		sql.append("    LEFT JOIN mnt_mngandusers mng ON mem.ID = mng.userMemberId ");
		sql.append("     WHERE mng.state = 1 AND org.Enable = 1  and mng.mntMemberId="+id);
		sql.append(" GROUP BY org.id,org.seqCode,con.accNo");
		return this.findPageBySqlQuery(sql.toString(), info.getPage(), info.getRows());
	}

	@Override
	public int getNumCount(Integer id) {
		int num=0;
		StringBuffer sql=new  StringBuffer();
		sql.append("SELECT COUNT(*) as num FROM ( ");
		sql.append("SELECT  DISTINCT IFNULL(org.ID,");
		sql.append(" '') AS ORGID,");
		sql.append(" IFNULL(cus.ID,");
		sql.append(" '') AS CUSID,");
		sql.append(" IFNULL(org. NAME,");
		sql.append(" '') AS ORGNAME,");
		sql.append(" cus.androidDeviceToken,");
		sql.append("  cus.iosDeviceToken ,cus.mobile");
		sql.append("   FROM mnt_customContract con LEFT JOIN ");
		sql.append("   mnt_customInfo cus ");
		sql.append("   ON con.cusId = cus.id ");
		sql.append("   LEFT JOIN biz_organization org   ON  org.mntCustomId = cus.id  ");
		sql.append("   LEFT JOIN biz_member mem ON org.ownerId = mem.ID  ");
		sql.append("    LEFT JOIN mnt_departmentInfo dep ON mem.departmentId = dep.id  ");
		sql.append("    LEFT JOIN mnt_mngandusers mng ON mem.ID = mng.userMemberId ");
		sql.append("     WHERE mng.state = 1 AND org.Enable = 1  and mng.mntMemberId="+id);
		sql.append(" GROUP BY org.id,org.seqCode,con.accNo ) x ");
		Query query = this.getSession().createSQLQuery(sql.toString());
		query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        List<Map<String, Object>> list = query.list();
        for (Map<String, Object> map : list)
        {
       	 if(map.get("num")==null){
       		 break;
       	 }
            num = Integer.parseInt(map.get("num").toString());
        }
		return num;
	}

	@Override
	public PageUtil getAllOrganizationByChose(Integer id, PageInfo info,
			String orgName) {
		if(orgName.trim().equals("")){
			StringBuffer sql=new StringBuffer();
			sql.append("SELECT  DISTINCT IFNULL(org.ID,");
			sql.append(" '') AS ORGID,");
			sql.append(" IFNULL(cus.ID,");
			sql.append(" '') AS CUSID,");
			sql.append(" IFNULL(org. NAME,");
			sql.append(" '') AS ORGNAME,");
			sql.append(" cus.androidDeviceToken,");
			sql.append("  cus.iosDeviceToken ,cus.mobile");
			sql.append("   FROM mnt_customContract con LEFT JOIN ");
			sql.append("   mnt_customInfo cus ");
			sql.append("   ON con.cusId = cus.id ");
			sql.append("   LEFT JOIN biz_organization org   ON  org.mntCustomId = cus.id  ");
			sql.append("   LEFT JOIN biz_member mem ON org.ownerId = mem.ID  ");
			sql.append("    LEFT JOIN mnt_departmentInfo dep ON mem.departmentId = dep.id  ");
			sql.append("    LEFT JOIN mnt_mngandusers mng ON mem.ID = mng.userMemberId ");
			sql.append("     WHERE mng.state = 1 AND org.Enable = 1  and mng.mntMemberId="+id);
			sql.append(" GROUP BY org.id,org.seqCode,con.accNo");
			return this.findPageBySqlQuery(sql.toString(), info.getPage(), info.getRows());
		}
		StringBuffer sql=new StringBuffer();
		sql.append(" select * from(");
		sql.append(" SELECT  DISTINCT IFNULL(org.ID,");
		sql.append(" '') AS ORGID,");
		sql.append(" IFNULL(cus.ID,");
		sql.append(" '') AS CUSID,");
		sql.append(" IFNULL(org. NAME,");
		sql.append(" '') AS ORGNAME,");
		sql.append(" cus.androidDeviceToken,");
		sql.append("  cus.iosDeviceToken ,cus.mobile");
		sql.append("   FROM mnt_customContract con LEFT JOIN ");
		sql.append("   mnt_customInfo cus ");
		sql.append("   ON con.cusId = cus.id ");
		sql.append("   LEFT JOIN biz_organization org   ON  org.mntCustomId = cus.id  ");
		sql.append("   LEFT JOIN biz_member mem ON org.ownerId = mem.ID  ");
		sql.append("    LEFT JOIN mnt_departmentInfo dep ON mem.departmentId = dep.id  ");
		sql.append("    LEFT JOIN mnt_mngandusers mng ON mem.ID = mng.userMemberId ");
		sql.append("     WHERE mng.state = 1 AND org.Enable = 1  and mng.mntMemberId="+id);
		sql.append(" GROUP BY org.id,org.seqCode,con.accNo )x where x.ORGNAME like '%"+orgName+"%'");
		return this.findPageBySqlQuery(sql.toString(), info.getPage(), info.getRows());
	}

	@Override
	public int updateSendMessage(Integer orgId, String topname) {
		List<SendMessage> list=this.getSendMessage(orgId);
		SendMessage message=list.get(0);
		if(message.getOrchange()==1){
			return 1;
		}
		message.setTopname(topname);
		message.setOrchange(1);
		this.getSession().update(message);
		return 2;
	}

	private List<SendMessage> getSendMessage(Integer orgId) {
		StringBuffer sql = new StringBuffer();
        sql.append("SELECT * from mnt_sendmessage where member_id=?");
        Query query = this.getSession().createSQLQuery(sql.toString()).addEntity(SendMessage.class);
        query.setParameter(0, orgId);
		return query.list();
	}

	@Override
	public int add_sendRightNow(String mytext, String array,Integer id,String orgName) {
		String[] sts=array.split(",");
		try {
			for(String tel:sts){
				Map<String, Object> map = SMSSender.sendfeeNotice(tel,
						new String[] {orgName+mytext});
				if(map.get("statusCode").equals("000000")){
					SendMessage message=new SendMessage();
					message.setContent(mytext);
					message.setCratetime(new Date());
					message.setMemberId(id);
					message.setOrchange(0);
					message.setSendtime(new Date());
					message.setTopname("理财金服");
					message.setStatus(2);
					message.setTelephone(tel);
					this.getSession().save(message);
				}

			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		return 1;
	}

	@Override
	public int savewaitSendMessage(String mytext, String array, String dateTime,Integer id) {
		// TODO Auto-generated method stub
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date sendtime=null;
		try {
			sendtime = df.parse(dateTime);
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			for(String tel :array.split(",")){
				SendMessage message=new SendMessage();
				message.setContent(mytext);
				message.setCratetime(new Date());
				message.setMemberId(id);
				message.setOrchange(0);
				message.setSendtime(sendtime);
				message.setTopname("理财金服");
				message.setStatus(2);
				message.setTelephone(tel);
				//message.setNum(num);// 发送短信数量
				this.getSession().save(message);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return 1;
	}

	@Override
	public List<SendMessage> getAllMessage(Integer id) {
		StringBuffer sql = new StringBuffer();
        sql.append("SELECT * from mnt_sendmessage where member_id=?");
        Query query = this.getSession().createSQLQuery(sql.toString()).addEntity(SendMessage.class);
        query.setParameter(0, id);
        return query.list();
	}

	@Override
	public PageUtil getFenyeResult(Integer id, PageInfo info) {
		StringBuffer sql = new StringBuffer();
        sql.append("SELECT * from mnt_sendmessage where member_id="+id);
		return this.findPageBySqlQuery(sql.toString(), info.getPage(), info.getRows());
	}

	@Override
	public PageModel findList(int pageNo, int pageSize,Integer id) {
		//一共有多少页
		int totalPage=0;
		//总记录数
		int TotalNum=getTotalNum(id);
		if(TotalNum%pageSize==0){
		 totalPage=TotalNum/pageSize;
		}else {
			totalPage=TotalNum/pageSize+1;
			}
		 if(pageNo>totalPage){
			pageNo=totalPage;
			 	}
			if(pageNo<1){
			pageNo=1;
				}
		int begin=(pageNo-1)*pageSize;
        Query query = this.getSession().createQuery("From SendMessage");
        query.setFirstResult(begin);
        query.setMaxResults(pageSize);
        PageModel pageModel=new PageModel();
		pageModel.setList(query.list());
		pageModel.setTotalRecord(TotalNum);	
		pageModel.setPageSize(pageSize);
		pageModel.setPageNum(pageNo);
		return pageModel;
	}

	private int getTotalNum(Integer id) {
		int num = 0;
        StringBuffer sql = new StringBuffer();
        sql.append(" SELECT count(*) AS num");
        sql.append(" from mnt_sendmessage where member_id="+id);
        Query query = this.getSession().createSQLQuery(sql.toString());
        query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
        List<Map<String, Object>> list = query.list();
        for (Map<String, Object> map : list)
        {
            num = Integer.parseInt(map.get("num").toString());
        }
        if (num > 0)
        {
            return num;
        }
        return num;
	}

	@Override
	public SendMessage findMessageById(Integer id) {
		
		SendMessage SendMessage = (com.wb.model.entity.computer.SendMessage) this.getSession().get(SendMessage.class, id);
		return SendMessage;
		 
	}

	@Override
	public int updateMessage(SendMessage sendMessage,Integer id) {
		SendMessage message=(SendMessage) this.getSession().get(SendMessage.class, sendMessage.getId());
		message.setContent(sendMessage.getContent());
		this.getSession().update(message);
		return 1;
	}

	

}
